import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Union

import requests
from telegram import CallbackQuery, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import CallbackContext

from bot.keyboards.event import EVENT_MENU, EVENT_MENU_BUTTONS, FINISH_EVENT_BUTTONS, NOTIFICATION_BUTTONS

# TODO: –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ API —Å–æ–±—ã—Ç–∏–π
EVENTS_URL = "http://127.0.0.1:8000/api/events/"

logger = logging.getLogger(__name__)


async def show_event_menu(update: Update, _: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    keyboard = InlineKeyboardMarkup(EVENT_MENU_BUTTONS)
    query = update.callback_query
    await query.answer()
    message_text = """–ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø–æ–∫–∞–∑—ã —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π, –ø—Ä–æ–≤–æ–¥–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, —É—á–∞—Å—Ç–≤—É–µ–º –≤ \
–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —è—Ä–º–∞—Ä–∫–∞—Ö, —Ñ–µ—Å—Ç–∏–≤–∞–ª—è—Ö...
–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö?"""
    await query.edit_message_text(
        text=message_text,
        reply_markup=keyboard,
    )
    return EVENT_MENU


async def show_upcoming_events(update: Update, _: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏."""
    message_template = """üìÖ {event_time_formatted}
üé≠ {name}

üìç {location}

{description}
üè∑Ô∏è {category}"""
    closing_message = """–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–æ–Ω—Å–∞—Ö, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–∞—à–∏—Ö \
–±—É–¥—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å \
–∫ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."""

    query = update.callback_query
    await query.answer()
    events = await _async_get_deserialized_json(url=EVENTS_URL)
    if len(events) == 0:
        await _process_no_events(query=query, closing_message=closing_message)
        return
    await _send_event_messages(query=query, events=events, message_template=message_template)
    await _send_closing_message(query=query, closing_message=closing_message)


async def show_gratitude_and_subscribe_to_notifications(update: Update, _: CallbackContext):
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –Ω–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å–æ–±—ã—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    message_text = """–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º —Å–æ–±—ã—Ç–∏—è–º! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.

–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = InlineKeyboardMarkup(NOTIFICATION_BUTTONS)
    await query.edit_message_text(text=message_text, reply_markup=keyboard)


async def _async_get_deserialized_json(url: str) -> Union[Dict, List]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç JSON."""
    loop = asyncio.get_running_loop()
    response = await loop.run_in_executor(None, requests.get, url)
    return response.json()


async def _process_no_events(query: CallbackQuery, closing_message: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç."""
    keyboard = InlineKeyboardMarkup(FINISH_EVENT_BUTTONS)
    message = "\n\n".join(["–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.", closing_message])
    await query.edit_message_text(text=message, reply_markup=keyboard)


async def _send_event_messages(query: CallbackQuery, events: List[Dict], message_template: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö."""
    for event in events:
        event_time = datetime.fromisoformat(event["event_time"])
        event_time_formatted = event_time.strftime("%d.%m.%Y %H:%M")
        message = message_template.format(**event, event_time_formatted=event_time_formatted)
        try:
            await query.message.reply_text(text=message, parse_mode="HTML")
        except BadRequest as exc:
            logger.warning(msg=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: {message}.", exc_info=exc)


async def _send_closing_message(query: CallbackQuery, closing_message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    keyboard = InlineKeyboardMarkup(FINISH_EVENT_BUTTONS)
    message = "\n\n".join(["–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.", closing_message])
    await query.message.reply_text(text=message, reply_markup=keyboard)
